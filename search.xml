<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker&amp;k8s的部署笔记</title>
      <link href="posts/49176/"/>
      <url>posts/49176/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>之后完善（应该吧）</p><p>1.升级内核<br> vi /etc/hostname<br>    yum install <a href="https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm">https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm</a><br>    yum –disablerepo=”*” –enablerepo=”elrepo-kernel” list available<br>    yum –enablerepo=elrepo-kernel install kernel-lt<br>   cat /boot/grub2/grub.cfg<br>     vi /etc/default/grub<br>GRUB_DEFAULT=0<br>grub2-mkconfig -o /boot/grub2/grub.cfg<br>reboot<br>2共通部分<br>   vi /etc/sysconfig/network-scripts/ifcfg-eno33554960     nat外网<br>   vi /etc/sysconfig/network-scripts/ifcfg-eno16777736      内网<br>  systemctl restart network<br>  setenforce 0<br>   systemctl stop firewalld<br>    systemctl disable firewalld<br>     vi /etc/selinux/config= sed -i ‘s/SELINUX=enforcing/SELINUX=disabled/‘ /etc/selinux/config<br>修改SELINUX=disabled<br>vi /etc/hosts  修改hosts映射<br>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4<br>::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<br>192.168.2.10 master<br>192.168.2.20 node1<br>192.168.2.30 node2<br>199.232.68.133 raw.githubusercontent.com<br>   scp hosts <a href="mailto:&#114;&#x6f;&#111;&#x74;&#x40;&#x31;&#x39;&#x32;&#46;&#x31;&#54;&#x38;&#x2e;&#50;&#46;&#x32;&#48;">&#114;&#x6f;&#111;&#x74;&#x40;&#x31;&#x39;&#x32;&#46;&#x31;&#54;&#x38;&#x2e;&#50;&#46;&#x32;&#48;</a>:/etc/<br>    scp hosts <a href="mailto:&#x72;&#111;&#x6f;&#116;&#x40;&#x31;&#x39;&#50;&#46;&#x31;&#x36;&#x38;&#x2e;&#x32;&#46;&#x33;&#48;">&#x72;&#111;&#x6f;&#116;&#x40;&#x31;&#x39;&#50;&#46;&#x31;&#x36;&#x38;&#x2e;&#x32;&#46;&#x33;&#48;</a>:/etc/      远程拷贝hosts<br>swapoff –a<br>sed -i ‘/ swap / s/^/#/‘ /etc/fstab   关闭交换分区</p><p>[root@master /]# cat  /etc/sysctl.d/k8s.conf<br>net.bridge.bridge-nf-call-ip6tables = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>net.ipv4.ip_forward = 1</p><p>可以scp</p><p>modprobe br_netfilter   需执行<br>sysctl -p /etc/sysctl.d/k8s.conf  应用<br>yum install wget –y     wget 安装<br>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo%E6%9B%B4%E6%96%B0%E9%95%9C%E5%83%8F">http://mirrors.aliyun.com/repo/Centos-7.repo更新镜像</a><br>yum makecache   缓存<br>yum install -y yum-utils device-mapper-persistent-data lvm2  安装工具<br>yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a>  添加docker源<br>yum list docker-ce –showduplicates|sort 查看可安装版本<br>yum -y install docker-ce-19.03.15 docker-ce-cli-19.03.15 containerd.io  安装docker<br>cat &lt;&lt; EOF &gt; /etc/docker/daemon.json<br>    {<br>     “exec-opts”: [“native.cgroupdriver=systemd”]<br>      }<br>EOF    更改cgroupdriver为systemd</p><p>  scp  /etc/docker/daemon.json root@node1:/etc/docker/<br>    scp  /etc/docker/daemon.json root@node2:/etc/docker/</p><p>systemctl start docker<br> systemctl enable docker<br>cat &lt;<EOF > /etc/yum.repos.d/kubernetes.repo<br>    [kubernetes]<br>   name=Kubernetes<br>  baseurl=<a href="http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64">http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</a><br>    enabled=1<br>   gpgcheck=0<br>   repo_gpgcheck=0<br>    gpgkey=<a href="http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg">http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</a><br>           <a href="http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg">http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</a><br>EOF       获取k8s源<br>yum install -y kubelet kubeadm kubectl<br>systemctl enable kubelet.service<br>3 红色master部分<br>kubeadm init –kubernetes-version=v1.20.5 –image-repository registry.aliyuncs.com/google_containers –pod-network-cidr=10.244.0.0/16 –service-cidr=10.96.0.0/12 –ignore-preflight-errors=Swap   master初始化</p><p>mkdir -p $HOME/.kube<br>  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>   sudo chown $(id -u):$(id -g) $HOME/.kube/config<br>   systemctl start kubelet           master操作<br>4黄色node部分<br>kubeadm join 192.168.2.10:6443 –token vlqx19.4l8z2xbll6fsv0pj     –discovery-token-ca-cert-hash sha256:58e2ac72e7d6a884d7ff5c6ab9b6fc763c903f20b09f3dbd769f2e30821ecaba                  写入master生成的token  node操作<br>3接续master<br>kubectl get node 查看node信息发现notready 因为网络插件未安装<br>wget <a href="https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml">https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</a><br>  kubectl apply -f kube-flannel.yml    安装flannel网络插件</p><p>（<a href="https://github.com/kubernetes/dashboard/">https://github.com/kubernetes/dashboard/</a><br><a href="https://github.com/kubernetes/dashboard/tree/master/aio/deploy%E4%B8%8B%E8%BD%BD%E6%88%96%E5%A4%8D%E5%88%B6recommended.yaml%EF%BC%89">https://github.com/kubernetes/dashboard/tree/master/aio/deploy下载或复制recommended.yaml）</a><br>kubectl apply -f recommended.yaml<br>kubectl delete service kubernetes-dashboard –namespace=kubernetes-dashboard  删掉service</p><p>[root@master docker]# cat dashboard-svc.yaml<br>kind: Service<br>apiVersion: v1<br>metadata:<br>  labels:<br>    k8s-app: kubernetes-dashboard<br>  name: kubernetes-dashboard<br>  namespace: kubernetes-dashboard<br>spec:<br>  type: NodePort<br>  ports:<br>    - port: 443<br>      nodePort: 30443<br>      targetPort: 8443<br>  selector:<br>    k8s-app: kubernetes-dashboard</p><p>kubectl apply -f dashboard-svc.yaml  安装通过nodeport暴露的服务</p><p>[root@master docker]# cat dashboard-svc-account.yaml<br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: dashboard-admin<br>  namespace: kube-system</p><hr><p>kind: ClusterRoleBinding<br>apiVersion: rbac.authorization.k8s.io/v1beta1<br>metadata:<br>  name: dashboard-admin<br>subjects:</p><ul><li>kind: ServiceAccount<br>name: dashboard-admin<br>namespace: kube-system<br>roleRef:<br>kind: ClusterRole<br>name: cluster-admin<br>apiGroup: rbac.authorization.k8s.io    创建角色</li></ul><p>kubectl apply –f dashboard-svc-account.yaml</p><p>kubectl get secret -n kube-system |grep admin<br>  kubectl describe secret dashboard-admin-token-qnzhh -n kube-system              token查询<br>kubectl create clusterrolebinding test:anonymous –clusterrole=cluster-admin –user=system:anonymous    允许查看命名空间</p><pre><code>mkdir -p /root/kubernetes/Helm   &amp;&amp; cd  /root/kubernetes/Helm  wget https://get.helm.sh/helm-v3.5.3-linux-amd64.tar.gz</code></pre><p>   tar -zxvf helm-v3.5.3-linux-amd64.tar.gz<br>   mv linux-amd64/helm /usr/local/bin/helm<br>    helm  version<br>   helm repo add stable <a href="https://charts.helm.sh/stable">https://charts.helm.sh/stable</a></p><p>wget  <a href="https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.44.0/deploy/static/provider/baremetal/deploy.yaml">https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.44.0/deploy/static/provider/baremetal/deploy.yaml</a><br>docker pull quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.33.0   拉取ingress-controller镜像<br>vi deploy.yaml  将controller的image地址改为quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.33.0<br>kubectl apply –f deploy.yaml<br>[root@master docker]# cat myapp.yaml<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: myapp<br>  namespace: default<br>spec:<br>  selector:<br>    app: myapp<br>    release: canary<br>  ports:</p><ul><li>name: http<br>port: 80<br>targetPort: 80</li></ul><hr><p>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: myapp-deploy<br>spec:<br>  replicas: 2<br>  selector:<br>    matchLabels:<br>      app: myapp<br>      release: canary<br>  template:<br>    metadata:<br>      labels:<br>        app: myapp<br>        release: canary<br>    spec:<br>      containers:<br>      - name: myapp<br>        image: ikubernetes/myapp:v2<br>        ports:<br>        - name: httpd<br>          containerPort: 80</p><p>[root@master docker]# cat mysvc.yaml<br>apiVersion: extensions/v1beta1<br>kind: Ingress<br>metadata:<br>  name: ingress-myapp<br>  namespace: default<br>  annotations:<br>    kubernetes.io/ingress.class: “nginx”<br>spec:<br>  rules:</p><ul><li>host: myapp.magedu.com #生产中该域名应当可以被公网解析<br>http:<br>  paths:<ul><li>path:<br>backend:<br>  serviceName: myapp</li></ul></li></ul><p>几个基础运维命令<br>kubectl get node<br>   kubectl get pods –all-namespaces<br>   kubectl get pods –all-namespaces -o wide<br>kubectl get svc –all-namespaces<br>   kubectl get svc–all-namespaces -o wide<br>kubectl get deployment –all-namespaces<br>   kubectl get deployment –all-namespaces -o wide<br>kubectl get ingress –all-namespaces</p><p>kubectl  exec -ti  myapp-deploy-9c59596cd-45xsv -n default  – /bin/sh</p><p>kubectl delete {pod|svc|deployment|ingress} myapp-deploy-7b85dc6654-wlb8v</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picture</title>
      <link href="posts/22355/"/>
      <url>posts/22355/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>图片测试</p><img src="/posts/22355/1.jpg" class="" title="隐秘的角落">]]></content>
      
      
      <categories>
          
          <category> 图片 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇blog</title>
      <link href="posts/45388/"/>
      <url>posts/45388/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>欢迎光临我的博客<br>Hello world</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/16107/"/>
      <url>posts/16107/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>欢迎光临我的博客</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
